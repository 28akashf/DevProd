@{
    ViewData["Title"] = "Tool";
}
@model DevProdWebApp.ViewModels.SettingsViewModel
<h1>@ViewData["Tool Settings"]</h1>
<div>
   
  
    <div class="container grey lighten-5">
        <div class="row">
            <div class="col-md-4"></div>
            <div class="col-md-4"> <h2 class="grey-text text-darken-1"> Customization</h2></div>
            </div>
           <div class="row">
               <div class="col-md-12">
            <div class="card darken-1">
                <div class="card-content">
                    <span class="card-title">Settings</span>
                    <div class="row"></div>
                    <div class="row">
                  <div class="col-md-6">
         
                      <div class="row">
 
                      
            
                    <div class="input-field col-md-8">
                        <select id="method" title="method" asp-for="@Model.Methodolgy" onchange="checkForWeights()">
                            <option value="sum">SUM</option>                          
                            <option value="wtsum">Weighted Sum Model</option>
                            <option value="wtprod">Weighted Product Model</option>
                            <option value="wtwaspas">Weighted Average Sum and Product Model</option>
                            <option value="gmean">Geometric Mean</option>
                        </select>
                        <label for="method">Methodology</label>
                    </div>
                    </div>
                    <div class="row">
                  
                    <div class="input-field col-md-8">
                        <select id="preproc" title="preproc" asp-for="@Model.Preprocessing">
                            <option value="">None</option>
                            <option value="minmax">Min Max</option>
                            <option value="zscore">Z-Score</option>
                            <option value="log">Log Transform</option>
                            <option value="exp">Exponential Transform</option>
                            <option value="sigmoid">Sigmoid Transform</option>
                            <option value="boxcox">BoxCox Transform</option>
                            <option value="decimal">Decimal Scaling</option>
                            <option value="unitvector">Unitvector Scaling</option>
                            <option value="maxabs">Max Abs Scaling</option>
                        </select>
                        <label for="preproc">Data Preprocessing</label>
                    </div>
                      </div>
                <div class="row">
                    <div class="input-field col-md-8">

                        <select id="grouping" title="grouping" asp-for="@Model.Grouping" onchange="checkForGrouping()">
                            <option value="none">None</option>
                            <option value="developer">Developer</option>
                            <option value="project">Project</option>
                            <option value="days">Days</option>
                        </select>
                        <label for="grouping">Grouping</label>

                    </div>
                </div>
                <div id="groupingdevrow" class="row">
                    <div class="input-field col-md-8">

                        <select id="subgroupingdev" title="subgrouping" asp-for="@Model.SubGrouping">
                            @foreach (var dev in Model.DeveloperList)
                            {
                                <option value="@dev.Username">@dev.Username</option>
                            }
                        </select>
                        <label for="subgroupingdev">Developer</label>

                    </div>
                </div>
                <div id="groupingprojrow" class="row">
                    <div class="input-field col-md-8">

                        <select id="subgroupingproj" title="subgrouping" asp-for="@Model.SubGrouping">
                           @foreach(var proj in Model.ProjectList)
                            {
                                <option value="@proj.Name">@proj.Name</option>
                            }
                          
                          
                        </select>
                        <label for="subgroupingproj">Project</label>

                    </div>
                </div>
                <div id="groupingdaysrow" class="row">
                    <div class="input-field col-md-8">

                        <select id="subgroupingdays" title="subgrouping" asp-for="@Model.SubGrouping">
                           
                                <option value="10">Last 10 days</option>
                            <option value="15">Last 15 days</option>
                            @for(int i = 30 ; i < 360;i=i+30)
                            {
                                <option value="@i">Last @i days</option>
                            }

                            <option value="365">Last 365 days</option>
                            
                        </select>
                        <label for="subgroupingdays">Days</label>

                    </div>
                </div>
                <div class="row">
                   
                    <div class="col-md-2">
                        <a class="waves-effect waves-light btn" onclick="saveSettings()">Save</a>
                    </div>
                    <div class="col-md-2">
                        <a class="waves-effect waves-light btn" asp-action="ToolDashboard" asp-controller="Home">Back</a>
                    </div>
                </div>

         
                  </div>
                  <div class="col-md-4">
             
                      @for(int i = 0; i < Model.ToolMetricList.Count;i++)
                      {
                    string wtrowid = "wt" + @Model.ToolMetricList[i].Name + (i + 1) + "row";
                    string inpId = "wt" + @Model.ToolMetricList[i].Name;
                    <div id="@wtrowid" class="row wtrow">
                        <div class="input-field col-md-12">
                  
                              
                                <input id="@inpId" type="text" value="@Model.ToolMetricList[i].Weight" class="wtinp">
                                <label for="@inpId">Weight (@Model.ToolMetricList[i].Name)</label>
                       
                          

                        </div>
                    </div>
                     }
              
                <div id="lamrow" class="row">
                    <div class="input-field col-md-12">
                 
                            <input id="lam" type="text" value="@Model.Parameters">
                    
                       
                        <label for="lam">λ (WASPAS)</label>

                    </div>
                </div>
                 
                  </div>
                        </div>
                </div>
            </div>
            </div>
           </div>
        <div class="row">
            <div class="card darken-1">
                <div class="card-content">
                    <span class="card-title">Scale</span>
            <div class="col-md-12">
               
                <ul class="tabs">
                    @for(int i = 0; i < Model.ToolMetricList.Count; i++)
                    {
                        string href = "#test"+Model.ToolMetricList[i].Name;
                   
                        string status = "active";
                        if(i>0)
                        {
                            status = "";
                        }
                        <li class="tab col-md-3"><a class="@status" href="@href">@Model.ToolMetricList[i].Name</a></li>
                    }
                   
                </ul>
              
            </div>
            @foreach(var metricScale in Model.ToolMetricScaleList)
            {
                string divId = "test" + metricScale.MetricName;
                <div id="@divId" class="col-md-12">
                    <div class="row">
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-8">
                        
                            <table id="@metricScale.MetricName" class="table-responsive">
                                <thead>
                                    <tr>
                                        <th>Rating</th>
                                        <th>Lower Bound</th>
                                        <th>Upper Bound</th>
                                    </tr>
                                </thead>
                                @if (metricScale.ScaleObjects.Count == 0)
                                {
                                    <tbody>

                                      
                                           @{
                                            int i = 0;
                                            string desc = "tbl" + metricScale.MetricName + "_" + (i + 1);
                                            string ub = "tbl" + metricScale.MetricName + "u_" + (i + 1);
                                            string lb = "tbl" + metricScale.MetricName + "l_" + (i + 1);
                                        }
                                            <tr>
                                                <td>
                                                    <input id="@desc" type="text" placeholder="Rating">
                                                </td>
                                                <td>
                                                    <input id="@lb" type="text" placeholder="Lower Bound">
                                                </td>
                                                <td>
                                                    <input id="@ub" type="text" placeholder="Upper Bound">
                                                </td>
                                            </tr>
                                        

                                    </tbody>
                                }
                                else
                                {
                                    <tbody>
                                        @for(int i = 0; i < metricScale.ScaleObjects.Count; i++)
                                        {
                                            string desc = "tbl" + metricScale.MetricName + "_"+(i+1);
                                            string ub = "tbl" + metricScale.MetricName + "u_"+(i+1);
                                            string lb = "tbl" + metricScale.MetricName + "l_"+(i+1);
                                            <tr>
                                                <td>
                                                    <input id="@desc" type="text" placeholder="Rating" value="@metricScale.ScaleObjects[i].Description">
                                                </td>
                                                <td>
                                                    <input id="@lb" type="text" placeholder="Lower Bound" value="@metricScale.ScaleObjects[i].LowerBound">
                                                </td>
                                                <td>
                                                    <input id="@ub" type="text" placeholder="Upper Bound" value="@metricScale.ScaleObjects[i].UpperBound">
                                                </td>
                                            </tr>
                                        }
                                      
                                    </tbody>
                                }
                            </table>
                            <a class="waves-effect waves-light btn" onclick="addNewRowBelow('@metricScale.MetricName')">Add Row</a>
                            <a class="waves-effect waves-light btn" onclick="deleteLastRow('@metricScale.MetricName')">Delete Row</a>
                            <a class="waves-effect waves-light btn" onclick="createScale('@metricScale.MetricName')">Save</a>
                        </div>
                        <div class="col-md-2">
                        </div>
                    </div>
                </div>
            }
                </div>
            </div>
      
        </div>
    </div>

</div>
<script type="text/javascript">
    
   function saveSettings() {
    
        var method = document.getElementById('method').value;
        var preproc = document.getElementById('preproc').value;
        var grouping = document.getElementById('grouping').value;
       var subgrouping;
       switch (grouping) { 
           case "developer":
                subgrouping =   document.getElementById('subgroupingdev').value;
               break;
                   case "project":
                subgrouping =   document.getElementById('subgroupingproj').value;
               break;
            case "none":
                subgrouping = "";
                break;
       }
       
       var params = {};
       var paramJson = '';
       var wtarr = [];
       if (method == 'wtwaspas') {
            var txtInps = document.getElementsByClassName("wtinp");
           for (i = 0; i < txtInps.length;i++) {
                let wtVal = txtInps[i].value;
                let metricName = txtInps[i].id;
                wtarr.push({ metric: metricName, weight: wtVal });
           }
            params = { weights:wtarr, 'lam': document.getElementById('lam').value }
            paramJson = JSON.stringify(params);
       }
       else if(method.includes('wt'))
       {
            var txtInps = document.getElementsByClassName("wtinp");
            for (i = 0; i < txtInps.length; i++) {
                let wtVal = txtInps[i].value;
                let metricName = txtInps[i].id;
                wtarr.push({ metric: metricName, weight: wtVal });
            }
            params = { weights: wtarr }
            paramJson = JSON.stringify(params);
       }
      
        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveSettings", "Home")',
            data: { methodology:method, preprocessing:preproc, param:paramJson, group:grouping, subgroup:subgrouping },
            success: function (response) {

              
            },
            error: function (xhr, status, error) {
             
            }
        });

    }

    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('select');
        var options = document.querySelectorAll('option');
        var tabs = document.querySelectorAll('.tabs');
        var taboptions = document.querySelectorAll('li');
        var instances = M.FormSelect.init(elems, options);
        var instance = M.Tabs.init(tabs, taboptions);
        checkForWeights();
        checkForGrouping();
    });

    function checkForWeights() {
        var method = document.getElementById('method').value;
        var wtm = document.getElementsByClassName("wtrow");
        var lam = document.getElementById("lamrow");
       
        if (method == 'wtwaspas') 
        {
            for (i = 0;i<wtm.length;i++) 
            {
                wtm[i].style.display = "block";
            }
            lam.style.display = "block";
        }
        else if (method.includes('wt')) {
            for (i = 0; i < wtm.length; i++) 
            {
                wtm[i].style.display = "block";
            }
            lam.style.display = "none";
        }
        else {

            for (i = 0; i < wtm.length; i++) {
                wtm[i].style.display = "none";
            }
            lam.style.display = "none";
        }
       
    }

    function checkForGrouping() {
        var grouping = document.getElementById('grouping').value;   
        var groupingdev = document.getElementById('groupingdevrow');
        var groupingproj = document.getElementById('groupingprojrow')
        var groupingdays = document.getElementById('groupingdaysrow')
        switch (grouping) { 
            case 'developer':
                groupingproj.style.display = "none";
                groupingdays.style.display = "none";
                groupingdev.style.display = "block";
                break;
            case 'project':
                groupingdev.style.display = "none";
                groupingdays.style.display = "none";
                groupingproj.style.display = "block";              
                break;
            case 'days':
                groupingdev.style.display = "none";
                groupingproj.style.display = "none";
                groupingdays.style.display = "block";
                break;
            case 'none':
                groupingdev.style.display = "none";
                groupingproj.style.display = "none";
                groupingdays.style.display = "none";

                break;
        }
    }



    function addNewRowBelow(tblName) {
        var totalRows = document.getElementById(tblName).rows.length;
        var rowNumberNew = parseInt(totalRows);
        var lastRow = document.getElementById(tblName).rows[totalRows - 1];
        console.log(lastRow);
         var newRow = $('<tr/>');
        newRow.html('<td><input id = "tbl' + tblName + '_' + rowNumberNew + '" type = "text" placeholder = "Rating" ></td><td><input id="tbl' + tblName + 'l_' + rowNumberNew + '" type = "text" placeholder = "Lower Bound"></td><td><input id="tbl' + tblName + 'u_' + rowNumberNew + '" type = "text" placeholder = "Upper Bound" ></td>');
         $(newRow).insertAfter(lastRow);      
    }

    function deleteLastRow(tblName) {
        var tbl = document.getElementById(tblName);
        var totalRows = tbl.rows.length;
        if (totalRows > 2) {
            tbl.deleteRow(totalRows - 1);
        }
    }

    function createScale(tbl) 
    {
        console.log(tbl);
        var tblElem = document.getElementById(tbl);
        var totalRows = tblElem.rows.length - 1;
        var scaleDef = [];
        for (var i = 1; i <= totalRows; i++) 
        {
            var name = document.getElementById('tbl'+ tbl + '_' + i).value
            var lower = document.getElementById('tbl' + tbl + 'l_' + i).value
            var upper = document.getElementById('tbl' + tbl + 'u_' + i).value;
            var item = {Description:name,LowerBound:lower,UpperBound:upper}
            scaleDef.push(item);
        }
        //var scaleObj = {values:scaleDef}
        var jsonStr = JSON.stringify(scaleDef);
        $.ajax({
            type: "POST",
            url: '@Url.Action("SaveScale", "Home")',
            data: { scaleObject:jsonStr , table:tbl },
            success: function (response) {
            },
            error: function (xhr, status, error) {
            }
        });
    }
</script>