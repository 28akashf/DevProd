@{
    ViewData["Title"] = "Modify Metrics";
}

@model DevProdWebApp.Models.ToolMetric

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <div class="row">

        <div class="col-md-3">
            <div class="row input-field">
                <input id="metricName" type="text" value="@Model.Name" />
                <label for="metricName">Metric</label>
            </div>
            <div class="row input-field">
                <input id="weight" type="text" value="@Model.Weight"/>
                <label for="weight">Weight</label>
            </div>
            <div class="row input-field">
                <a class="waves-effect waves-light btn" onclick="editMetric(@Model.Id)">Edit Metric</a>
            </div>



        </div>
        <div class="col-md-1">
        </div>
        <div class="col-md-3">
            <div class="row input-field">
                <input id="metricValue" type="text"  />
                <label for="metricValue">Metric Value</label>
            </div>
            <div class="row input-field">
                <select id="devId" title="developer">
                    @foreach(var i in ViewData["dev"] as List<Developer>)
                    {
                        <option value="@i.Id">@i.Username</option>
                    }
                   
                </select>
                <label for="devId">Developer Id</label>
            </div>
            <div class="row input-field">
                <select id="projId" title="project">
                    @foreach (var i in ViewData["proj"] as List<Project>)
                    {
                        <option value="@i.Id">@i.Name</option>
                    }
                </select>
                <label for="projId">Project Id</label>
            </div>
            <div class="row input-field">
                <input id="date" type="text" placeholder="dd/mm/yyyy" />
                <label for="date">Date</label>
            </div>
            <div class="row input-field">
                <a class="waves-effect waves-light btn" onclick="addMetricValue(@Model.Id)">Add Value</a>
            </div>



        </div>
        <div class="col-md-1">
        </div>
        <div class="col-md-3">
              <form method="post" asp-controller="Home" asp-action="UploadMetricValues" enctype="multipart/form-data"> 
            <div class="row">
                <div class="col-md-12">
                    

                    <div class="file-field input-field">
                      
                        <div class="btn">
                            <span>Upload File</span>
                            <input id="fileupload" type="file" name="file">
                        </div>
                        <div class="file-path-wrapper">
                            <input class="file-path validate" type="text">
                        </div>
                      
                    </div>

                </div>
            </div>
            <div class="row input-field">
                <button class="waves-effect waves-light btn" type="submit" >Upload Metric</button>
            </div>
              </form>
        </div>
        <div class="col-md-2">
        </div>
    </div>
    <div class="row">
        <table class="table table-striped">
            <tr>
                <th>Id</th>
                <th>Value</th>
                <th>Developer Id</th>
                <th>Project Id</th>
                <th>Actions</th>
            </tr>
            @foreach (var x in ViewData["vals"] as List<ToolMetricValue>)
            {
                <tr>
                    <td>@x.Id</td>
                    <td>@x.Value</td>
                    <td>@x.DeveloperId</td>
                    <td>@x.ProjectId</td>
                    <td>
                        <a class="waves-effect waves-light btn" onclick="deleteMetric(@x.Id)">Delete</a>
                    </td>
                </tr>
            }


        </table>
    </div>
</div>


<script type="text/javascript">

    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('select');
        var options = document.querySelectorAll('option');      
        var instances = M.FormSelect.init(elems, options);
    });

    function editMetric(id) {
        var name = document.getElementById('metricName').value;
        var weight = document.getElementById('weight').value;
        $.ajax({
            type: "POST",
            url: '@Url.Action("EditMetric", "Home")',
            data: {id:id, name: name, weight: weight },
            success: function (response) {
                location.reload();

            },
            error: function (xhr, status, error) {

            }
        });
    }

    function uploadMetric(id) {
        alert(fileupload.files.length);
        let formData = new FormData();
        formData.append("file", fileupload.files[0]);
        $.ajax({
            type: "POST",
            url: '@Url.Action("UploadMetricValues", "Home")',
            body: formData,
            success: function (response) {

                location.reload();
            },
            error: function (xhr, status, error) {

            }
        });

    }
    function deleteMetric(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("DeleteMetricValue", "Home")',
            data: {id:id},
            success: function (response) {

                location.reload();
            },
            error: function (xhr, status, error) {

            }
        });

    }

    function addMetricValue(id) {
        var value = document.getElementById('metricValue').value;
        var proj = document.getElementById('projId').value;
        var dev = document.getElementById('devId').value;
        var date = document.getElementById('date').value;
        $.ajax({
            type: "POST",
            url: '@Url.Action("AddMetricValue", "Home")',
            data: { mid: id, value: value, proj:proj, dev:dev, date:date },
            success: function (response) {
                location.reload();

            },
            error: function (xhr, status, error) {

            }
        });
    }
  
</script>

